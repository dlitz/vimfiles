*QFEnter.txt*    Open a Quickfix item in a window you choose.
*QFEnter*

Author:       yssl <http://github.com/yssl>

==============================================================================
Contents                                                    *QFEnter-contents*

        1. Introduction ............................... |QFEnter-intro|
        2. Usage ...................................... |QFEnter-usage|
        3. Options .................................... |QFEnter-options|
        4. |switchbuf| option ........................... |QFEnter-switchbuf|
        5. Deprecated Commands & Options .............. |QFEnter-deprecated|
        6. Changelog .................................. |QFEnter-changelog|

==============================================================================
1. Introduction                                                *QFEnter-intro*

QFEnter allows you to open items from the |quickfix| or location list wherever you wish.

You can set a target window by giving it focus just before jumping to the
|quickfix| (or location list) window, or you can open items in new splits, vsplits, and tabs.
You can even open multiple items at once by visual selection!

Vim's default means of opening items from the |quickfix| list are limited and
inconvenient:

- You cannot select a window in which to open a file when you press <Enter>:
>
    Hitting the <Enter> key or double-clicking the mouse on a line has the
    same effect.  The file containing the error is opened *in the window
    above the quickfix window*.
                                    -- from :help quickfix
<
- It is inconsistent with other |quickfix| commands like |:cnext| and |:cprev|
  which open a file in a previously focused window.

- You cannot decide where a horizontal split will be created when using
  |CTRL-W_<Enter>|, Vim always creates the new split window above the
  |quickfix| window.

- There is no command at all for 'open in a new vertical split window'.

These are confusing and bothered me every time, so I wrote a simple plugin to
make up for these weak points.  Its name comes from the most basic way to open
a file from the |quickfix| window -- the <Enter> key.

==============================================================================
2. Usage                                                       *QFEnter-usage*

In the quickfix (or location list) window,

<Enter>, <2-LeftMouse>  (open)
Normal mode : Open an item under cursor in the previously focused window.
Visual mode : Open items in visual selection in the previously focused window.
              As a result, the last item appears in the window.

<Leader><Enter>  (vopen)
Normal mode : Open an item under cursor in a new vertical split of the
              previously focused window.
Visual mode : Open items in visual selection in a sequence of new vertical
              splits from the previously focused window.

<Leader><Space>  (hopen)
Normal mode : Open an item under cursor in a new horizontal split from the
              previously focused window.
Visual mode : Open items in visual selection in a sequence of new horizontal
              splits of the previously focused window.

<Leader><Tab>  (topen)
Normal mode : Open an item under cursor in a new tab.
Visual mode : Open items in visual selection in a sequence of new tabs.
              By default, the |quickfix| window is automatically opened in the
              new tab to help you open other Quickfix items. This behavior
              can be changed with the |g:qfenter_enable_autoquickfix| option.

You can change these key mappings in your .vimrc (see |QFEnter-options|).

==============================================================================
3. Options                                                   *QFEnter-options*

|QFEnter| mappings are enabled only in |quickfix| (or location list) window.

*g:qfenter_keymap*
Customizable key mapping table for all 24 item-opening cases.
It is a vimscript dictionary which has 'command' (as key) and 'key list'
(as value) pairs.

Default: >
    let g:qfenter_keymap.open = ['<CR>', '<2-LeftMouse>']
    let g:qfenter_keymap.vopen = ['<Leader><CR>']
    let g:qfenter_keymap.hopen = ['<Leader><Space>']
    let g:qfenter_keymap.topen = ['<Leader><Tab>']
<
Supported commands are:

'open':   Open items under cursor or in visual block in a previously focused window.
'vopen':  Open items under cursor or in visual block in new vertical splits from a previously focused window.
'hopen':  Open items under cursor or in visual block in new horizontal splits from a previously focused window.
'topen':  Open items under cursor or in visual block in new tabs.

'cnext':  Open items using |:cnext| command in a previously focused window.
'vcnext': Open items using |:cnext| command in new vertical splits from a previously focused window.
'hcnext': Open items using |:cnext| command in new horizontal splits from a previously focused window.
'tcnext': Open items using |:cnext| command in new tabs.

'cprev':  Open items using |:cprev| command in a previously focused window.
'vcprev': Open items using |:cprev| command in new vertical splits from a previously focused window.
'hcprev': Open items using |:cprev| command in new horizontal splits from a previously focused window.
'tcprev': Open items using |:cprev| command in new tabs.

'open_keep':   Same as 'open', but the quickfix (or location list) window keeps focus after opening items.
'vopen_keep':  Same as 'vopen', but the quickfix (or location list) window keeps focus after opening items.
'hopen_keep':  Same as 'hopen', but the quickfix (or location list) window keeps focus after opening items.
'topen_keep':  Same as 'topen', but the quickfix (or location list) window keeps focus after opening items.

'cnext_keep':  Same as 'cnext', but the quickfix (or location list) window keeps focus after opening items.
'vcnext_keep': Same as 'vcnext', but the quickfix (or location list) window keeps focus after opening items.
'hcnext_keep': Same as 'hcnext', but the quickfix (or location list) window keeps focus after opening items.
'tcnext_keep': Same as 'tcnext', but the quickfix (or location list) window keeps focus after opening items.

'cprev_keep':  Same as 'cprev', but the quickfix (or location list) window keeps focus after opening items.
'vcprev_keep': Same as 'vcprev', but the quickfix (or location list) window keeps focus after opening items.
'hcprev_keep': Same as 'hcprev', but the quickfix (or location list) window keeps focus after opening items.
'tcprev_keep': Same as 'tcprev', but the quickfix (or location list) window keeps focus after opening items.

Note that |g:qfenter_keymap| should be defined as an empty dictionary 
in your .vimrc to customize key mappings.  >
    let g:qfenter_keymap = {}
<
For example, to open a next quickfix item in a previously focused window while keeping focus in the quickfix window by typing <Leader>a, you can use these:   >
    let g:qfenter_keymap = {}
    let g:qfenter_keymap.cnext_keep = ['<Leader>a']
<

*g:qfenter_enable_autoquickfix*
Enable or disable automatic opening of quickfix window when 'open in a new
tab' command is executed.
If enabled, quickfix window is automatically opened in the new tab with its
original size, view and position to help you open other quickfix items.
(not correctly, but smartly determined)
Default: >
    let g:qfenter_enable_autoquickfix = 1
<

*g:qfenter_cc_cmd*
*g:qfenter_ll_cmd*
QFEnter internally uses |:cc| (or |:ll| for the location list) command
to open an item under cursor.
If you're using your custom "cc" (or "ll") command instead of vim's 
default |:cc| (or |:ll|), you can register it by setting this option 
and make QFEnter use it.
The option should have "##" which is converted to the line number later.
Default: >
    let g:qfenter_cc_cmd = '##cc'
    let g:qfenter_ll_cmd = '##ll'
<

*g:qfenter_cn_cmd*
*g:qfenter_lne_cmd*
*g:qfenter_cp_cmd*
*g:qfenter_lp_cmd*
If you're using your custom "cn" or "cp" command instead of vim's default
|:cn| or |:cp| (or the equivalent for the location list, |:lne| or |:lp|), you
can register them by setting these options.
Default: >
    let g:qfenter_cn_cmd = 'cn'
    let g:qfenter_cp_cmd = 'cp'
    let g:qfenter_lne_cmd = 'lne'
    let g:qfenter_lp_cmd = 'lp'
<

==============================================================================
4. |switchbuf| option                                      *QFEnter-switchbuf*

You can control QFEnter's behavior with vim's |switchbuf| option when opening
an item.  When each opening command is invoked, QFEnter checks |switchbuf|
option and adjusts its behavior.  |switchbuf| option can have five values;
(none), useopen, usetab, split, newtab.

For example, you can set the option in your .vimrc as following:
>
    set switchbuf=useopen
<
The default value is (none), meaning that:
>
    set switchbuf=
<
If there is no already opened window of the buffer for the item you selected,
QFEnter opens the item with its default behavior as described in
|QFEnter-usage|.

Otherwise, |switchbuf| option choose the window to open the item in.
You can refer :help switchbuf for more details.

==============================================================================
5. Deprecated Commands & Options                          *QFEnter-deprecated*

Those commands are deprecated since version 2.3.0 and are supposed to be removed
in version 2.4.0.
Update those old key-mapping global variables and |g:qfenter_keep_quickfixfocus| 
in your .vimrc with new commands of |g:qfenter_keymap| and their corresponding
key maps.

*g:qfenter_open_map*
Key mappings to open items under cursor or in visual block in a previously
focused window.
Default: >
    let g:qfenter_open_map = ['<CR>', '<2-LeftMouse>']
<

*g:qfenter_vopen_map*
Key mappings to open items under cursor or in visual block in new vertical
splits from a previously focused window.
Default: >
    let g:qfenter_vopen_map = ['<Leader><CR>']
<

*g:qfenter_hopen_map*
Key mappings to open items under cursor or in visual block in new horizontal
splits from a previously focused window.
Default: >
    let g:qfenter_hopen_map = ['<Leader><Space>']
<

*g:qfenter_topen_map*
Key mappings to open items under cursor or in visual block in new tabs.
Default: >
    let g:qfenter_topen_map = ['<Leader><Tab>']
<

*g:qfenter_cnext_map*
*g:qfenter_vcnext_map*
*g:qfenter_hcnext_map*
*g:qfenter_tcnext_map*
Key mappings to open items using the :cnext command.
Disabled by default.
Default: >
    let g:qfenter_cnext_map = []
    let g:qfenter_vcnext_map = []
    let g:qfenter_hcnext_map = []
    let g:qfenter_tcnext_map = []
<

*g:qfenter_cprev_map*
*g:qfenter_vcprev_map*
*g:qfenter_hcprev_map*
*g:qfenter_tcprev_map*
Key mappings to open items using the :cprev command.
Disabled by default.
Default: >
    let g:qfenter_cprev_map = []
    let g:qfenter_vcprev_map = []
    let g:qfenter_hcprev_map = []
    let g:qfenter_tcprev_map = []
<

*g:qfenter_keep_quickfixfocus*
If you want quickfix (or location list) window to keep focus after opening items, you can set this
option for each opening command.
Default: >
    let g:qfenter_keep_quickfixfocus = {
          \'open':0,
          \'cnext':0,
          \'cprev':0,
          \}
<

==============================================================================
6. Changelog                                               *QFEnter-changelog*

2.3.1                       2017/03/04
    - Bug fix for deprecated variable(g:qfenter_keep_quickfixfocus) checking.
    - Update documents for customization.

2.3.0                       2017/02/28
    - Key mapping setup has totally changed for more flexible customizing.

2.2.2                       2015/05/26
    - Avoid messages when mappings are executed. (thanks to mMontu)
    - Catch E553 of cn & cp commands
    - Modelines, clean up vimdoc formatting and edit text (thanks to ches)
    - Support location list (thanks to feix760)
    
2.2.1                       2014/03/17
    - update document for 'switchbuf' option.

2.2.0                       2014/03/17
    - now QFEnter supports vim's 'switchbuf' option.
      if you change 'switchbuf' option, QFEnter adapts its behavior to the
      changed option.
    - thanks to sergey-vlasov!

2.1.0                       2014/01/28
    - subdivide g:qfenter_keep_quickfixfocus option for each command. e.g.
      g:qfenter_keep_quickfixfocus.open, g:qfenter_keep_quickfixfocus.cnext,
      g:qfenter_keep_quickfixfocus.cprev
    - bug fix : not updated window for already opened file when
      g:qfenter_keep_quickfixfocus==1
    - thanks to mMontu!

2.0.0                       2014/01/27
    - visual mode support to open multiple Quickfix items at once
    - add option to keep focus in Quicifix window after opening items
      (g:qfenter_keep_quickfixfocus)
    - support :cnext and :cprev command to open items

1.3.0                       2013/12/10
    - improve auto quickfix open when 'open in new tab'
        - restore view(cursor position, scroll..) of quickfix window to
          auto-opened quickfix window
        - restore size of quickfix window to auto-opened quickfix window
        - now you don't need to provide g:qfenter_copen_modifier option.
          QFEnter now smartly determine whether the new quickfix window is
          botright or topleft, vertical or horizontal.
    - change g:qfenter_ttopen_map option name to g:qfenter_topen_map (backward
      compatibility ismaintained)
    - remove '<Tab><Tab>' from default mapping

1.2.0                       2013/12/08
    - now, Quickfix window is automatically opened after "open in a new tab"
    - add options about Quickfix auto opening
    - add one more default mapping for "open in a new tab"
    - code refactoring

1.1.1                       2013/12/06
    - change default mapping for "open a file in a new tab"

1.1.0                       2013/12/06
    - add new features
        : open a file under cursor in a new tab.
        : register custom "cc" command with g:qfenter_cc_cmd

1.0.0                       2013/11/24
    - first version

 vim: tw=78 ts=8 sts=4 tw=4 et ft=help norl:
